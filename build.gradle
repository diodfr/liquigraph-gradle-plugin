/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'didier' at '20/04/16 15:06' with Gradle 2.12
 *
 * This generated file contains a commented-out sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/2.12/userguide/tutorial_java_projects.html
 */
group = 'org.liquigraph'
version = '3.0.9-SNAPSHOT'

// src https://plugins.gradle.org/docs/publish-plugin
buildscript {
  repositories {
    maven {
      url "https://plugins.gradle.org/m2/"
    }
  }
  dependencies {
    classpath "com.gradle.publish:plugin-publish-plugin:0.9.6"
  }
}

// Apply the java plugin to add support for Java
apply plugin: 'java'
apply plugin: 'maven'
apply plugin: "com.gradle.plugin-publish"

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
    mavenLocal()
}

// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    compile 'org.slf4j:slf4j-api:1.7.18'

    testCompile 'junit:junit:4.12'
    
    compile 'org.liquigraph:liquigraph-core:3.0.0'
    compile gradleApi()
    testCompile gradleTestKit()
}

// Write the plugin's classpath to a file to share with the tests
task createClasspathManifest {
    def outputDir = file("$buildDir/classes/test")

    inputs.files sourceSets.main.runtimeClasspath
    outputs.dir outputDir

    doLast {
        outputDir.mkdirs()
        def pluginClasspath = file("$outputDir/plugin-classpath.txt")
        //def classpaths = sourceSets.main.runtimeClasspath.join("\n")
        def classpaths = sourceSets.main.runtimeClasspath.findAll {it.getPath().contains("xerces")}.join("\n")
        classpaths += "\n" + sourceSets.main.runtimeClasspath.findAll {!it.getPath().contains("xerces")} .join("\n")
        classpaths += "\n" + sourceSets.test.resources.join("\n")
        pluginClasspath.text = classpaths
        //pluginClasspath.text = classpaths.findAll {it.getPath().startsWith("xml")} .join("\n")
    }
}

// Add the classpath file to the test runtime classpath
dependencies {
    testRuntime files(createClasspathManifest)
}

pluginBundle {
  website = 'https://fbiville.github.io/liquigraph/'
  vcsUrl = 'https://github.com/diodfr/liquigraph-gradle-plugin'
  description = 'A gradle plugin for liquigraph (graph migrations made easy).'
  tags = ['liquigraph', 'neo4j', 'graph', 'migration']

  plugins {
    greetingsPlugin {
      id = 'org.liquigraph.gradle'
      displayName = 'Liquigraph Gradle plugin'
    }
  }
}